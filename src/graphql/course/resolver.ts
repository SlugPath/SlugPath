import { Course } from "@generated/type-graphql/models/Course";
import { CourseService } from "./service";
import { Arg, Query, Resolver } from "type-graphql";
import { AboveOrBelowInput, QueryInput } from "@/app/ts-types/Args";

/**
 * CourseResolver is a Resolver class that provides custom functionality for
 * courses, which cannot be generated by Prisma
 */
@Resolver(Course)
export class CourseResolver {
  /**
   * `courses` returns all courses with limit 200
   * @returns
   */
  @Query(() => [Course])
  async courses(): Promise<Course[]> {
    return await new CourseService().allCourses();
  }

  /**
   * `coursesBy` returns a list of `Course` that satisfy the conditions in `input`
   * @param input a QueryInput instance
   * @returns a list of `Course` instances
   */
  @Query(() => [Course])
  async coursesBy(@Arg("input") input: QueryInput): Promise<Course[]> {
    return await new CourseService().coursesBy(input);
  }

  /**
   * `coursesBelow` is a custom query that asynchronously returns a
   * list of `Course` instances that have a course number less than `input.courseNum`.
   * @param input an `AboveOrBelowInput` instance containing department name and a valid `courseNum`.
   * @returns a list of `Course` instances
   */
  @Query(() => [Course])
  async coursesBelow(
    @Arg("input") input: AboveOrBelowInput,
  ): Promise<Course[]> {
    return await new CourseService().coursesAboveOrBelow(input);
  }

  /**
   * coursesAbove is a custom query that asynchronously returns a
   * list of `Course` instances that have a course number strictly greater than `input.courseNum`.
   * @param input an `AboveOrBelowInput` instance containing department name and a valid `courseNum`.
   * @returns a list of `Course` instances
   */
  @Query(() => [Course])
  async coursesAbove(
    @Arg("input") input: AboveOrBelowInput,
  ): Promise<Course[]> {
    return await new CourseService().coursesAboveOrBelow(input, true);
  }
}
