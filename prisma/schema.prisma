generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id                          String         @id
  email                       String    @unique
  name                        String?
  majorId                     Int?
  role                        Role           @default(USER)
  defaultPlannerId            String    @default("")
  majorRequirementSuggestions MajorRequirement[]
  planners                    Planner[]
  upvotes                     Upvote?
  major                       Major?         @relation(fields: [majorId], references: [id])
}

model Planner {
  id        String    @id @default(uuid())
  title     String
  updatedAt DateTime  @updatedAt
  order     Int
  userId    String?
  majorId   Int?
  notes     String?
  labels    Label[]
  major     Major?    @relation(fields: [majorId], references: [id], onDelete: Cascade)
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  quarters  Quarter[]
}

model Quarter {
  id        Int              @id @default(autoincrement())
  term      Term
  year      Int
  plannerId String
  courses   EnrolledCourse[]
  planner   Planner          @relation(fields: [plannerId], references: [id], onDelete: Cascade)
}

model EnrolledCourse {
  id              String   @id @default(uuid())
  title           String
  departmentCode  String
  number          String
  credits         Int
  ge              String[]
  quartersOffered String[]
  quarterId       Int
  labels          String[]
  description     String?
  quarter         Quarter  @relation(fields: [quarterId], references: [id], onDelete: Cascade)
}

model Course {
  department      String
  departmentCode  String
  number          String
  title           String
  credits         Int      @default(5)
  prerequisites   String
  ge              String[]
  quartersOffered String[]
  description     String?

  @@id([departmentCode, number])
}

model Major {
  id                  Int                              @id @default(autoincrement())
  name                String
  catalogYear         String
  createdAt           DateTime                         @default(now())
  updatedAt           DateTime                         @updatedAt
  permissions         MajorEditingPermission[]
  approvedRequirement MajorRequirement?         @relation("ApprovedMajorRequirement")
  majorRequirements   MajorRequirement[]
  defaultPlanners     Planner[]
  users               User[]

  @@unique([name, catalogYear])
}

model MajorRequirement {
  id              Int         @id @default(autoincrement())
  requirementList Json
  approvedMajorId Int?        @unique
  approvedMajor   Major?      @relation("ApprovedMajorRequirement", fields: [approvedMajorId], references: [id])
  major           Major       @relation(fields: [majorId], references: [id], onDelete: Cascade)
  majorId         Int
  userId          String
  user            User        @relation(fields: [userId], references: [id])
  upvotes         Upvote[]

  @@unique([majorId, userId])
}

// each major has many major requirements
// but each user can only have one major requirement per major.

model Upvote {
  id                 Int              @id @default(autoincrement())
  userId             String           @unique
  majorRequirementId Int
  majorRequirement   MajorRequirement @relation(fields: [majorRequirementId], references: [id])
  user               User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Permissions {
  id                      Int                      @id @default(autoincrement())
  majorEditingPermissions MajorEditingPermission[]
  userEmail               String                   @unique
}

model MajorEditingPermission {
  id             Int         @id @default(autoincrement())
  major          Major       @relation(fields: [majorId], references: [id])
  majorId        Int         @unique
  permissions    Permissions @relation(fields: [permissionsId], references: [id], onDelete: Cascade)
  permissionsId  Int
  expirationDate DateTime
}

model Label {
  id        String     @id @default(uuid())
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  color     LabelColor
  plannerId String
  planner   Planner    @relation(fields: [plannerId], references: [id], onDelete: Cascade)
}

enum LabelColor {
  RED
  ORANGE
  YELLOW
  GREEN
  BLUE
  PURPLE
  PINK
}

enum Role {
  USER
  ADMIN
}

enum Term {
  Fall
  Winter
  Spring
  Summer
}
