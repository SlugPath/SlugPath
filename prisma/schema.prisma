generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id       String    @id
  email    String?
  name     String?
  role     Role      @default(USER)
  planners Planner[]
}

model Planner {
  id        String    @id @default(uuid())
  title     String
  updatedAt DateTime  @updatedAt
  order     Int
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  quarters  Quarter[]
}

model Quarter {
  id        Int              @id @default(autoincrement())
  term      Term
  year      Int
  plannerId String
  courses   EnrolledCourse[]
  planner   Planner          @relation(fields: [plannerId], references: [id], onDelete: Cascade)
}

model EnrolledCourse {
  id              Int      @id @default(autoincrement())
  department      String
  number          String
  quartersOffered String[]
  credits         Int
  quarterId       Int
  quarter         Quarter  @relation(fields: [quarterId], references: [id], onDelete: Cascade)
  labels          Label[]  @relation("EnrolledCourseToLabel")
}

model Course {
  name            String
  department      String
  number          String
  credits         Int      @default(5)
  /// @TypeGraphQL.omit(output: true)
  createdAt       DateTime @default(now())
  /// @TypeGraphQL.omit(output: true)
  updatedAt       DateTime @updatedAt
  quartersOffered String[]

  @@id([department, number])
}

model Label {
  id        String           @id @default(uuid())
  name      String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  color     LabelColor
  userId    String
  courses   EnrolledCourse[] @relation("EnrolledCourseToLabel")
}

enum LabelColor {
  RED
  ORANGE
  YELLOW
  GREEN
  BLUE
  PURPLE
  PINK
}

enum Role {
  USER
  ADMIN
}

enum Term {
  Fall
  Winter
  Spring
  Summer
}
