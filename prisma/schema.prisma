generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id       String    @id
  email    String?
  name     String?
  major    Major?
  role     Role      @default(USER)
  planners Planner[]
  majorId  String?
}

model Planner {
  id        String    @id @default(uuid())
  title     String
  updatedAt DateTime  @updatedAt
  order     Int
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  quarters  Quarter[]
  labels    Label[]   @relation()
}

model Quarter {
  id      Int              @id @default(autoincrement())
  term    Term
  year    Int
  courses EnrolledCourse[]

  plannerId String
  planner   Planner @relation(fields: [plannerId], references: [id], onDelete: Cascade)
}

model EnrolledCourse {
  id              String   @id @default(uuid())
  title           String
  departmentCode  String
  number          String
  credits         Int
  ge              String[]
  quartersOffered String[]
  quarterId       Int
  quarter         Quarter  @relation(fields: [quarterId], references: [id], onDelete: Cascade)
  labels          String[]
}

model Course {
  department      String
  departmentCode  String
  number          String
  title           String
  credits         Int      @default(5)
  prerequisites   String
  ge              String[]
  quartersOffered String[]

  // No two courses can have the same department code and course number
  @@id([departmentCode, number])
}

model Major {
  id                 String   @id @default(uuid())
  name               String
  catalog_year       String
  default_planner_id Int
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String   @unique

  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Label {
  id        String     @id @default(uuid())
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  color     LabelColor

  plannerId String
  planner   Planner @relation(fields: [plannerId], references: [id], onDelete: Cascade)
}

enum LabelColor {
  RED
  ORANGE
  YELLOW
  GREEN
  BLUE
  PURPLE
  PINK
}

enum Role {
  USER
  ADMIN
}

enum Term {
  Fall
  Winter
  Spring
  Summer
}
