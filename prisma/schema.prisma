generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x", "darwin"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id               String    @id
  email            String    @unique
  name             String?
  role             Role      @default(USER)
  defaultPlannerId String    @default("")
  planners         Planner[]
  majors           Major[]   @relation("MajorToUser")
}

model Planner {
  id        String    @id @default(uuid())
  title     String
  updatedAt DateTime  @updatedAt
  order     Int
  userId    String?
  majorId   Int?
  notes     String?
  labels    Label[]
  major     Major?    @relation(fields: [majorId], references: [id], onDelete: Cascade)
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  quarters  Quarter[]
}

model Quarter {
  id        Int              @id @default(autoincrement())
  term      Term
  year      Int
  plannerId String
  courses   EnrolledCourse[]
  planner   Planner          @relation(fields: [plannerId], references: [id], onDelete: Cascade)
}

model EnrolledCourse {
  id              String   @id @default(uuid())
  title           String
  departmentCode  String
  number          String
  credits         Int
  ge              String[]
  quartersOffered String[]
  quarterId       Int
  labels          String[]
  description     String?
  quarter         Quarter  @relation(fields: [quarterId], references: [id], onDelete: Cascade)
}

model Course {
  department      String
  departmentCode  String
  number          String
  title           String
  credits         Int              @default(5)
  prerequisites   String
  ge              String[]
  quartersOffered String[]
  description     String?
  transferCourses TransferCourse[]

  @@id([departmentCode, number])
}

model TransferCourse {
  id             Int    @id @default(autoincrement())
  title          String
  departmentCode String
  number         String
  school         String
  course         Course @relation(fields: [departmentCode, number], references: [departmentCode, number])

  @@unique([departmentCode, number, school])
}

model Major {
  id               Int                     @id @default(autoincrement())
  name             String
  catalogYear      String
  createdAt        DateTime                @default(now())
  updatedAt        DateTime                @updatedAt
  programType      ProgramType             @default(Major)
  permissions      MajorEditingPermission?
  majorRequirement MajorRequirement?
  defaultPlanners  Planner[]
  users            User[]                  @relation("MajorToUser")

  @@unique([name, catalogYear, programType])
}

model MajorRequirement {
  id              Int   @id @default(autoincrement())
  requirementList Json
  majorId         Int   @unique
  major           Major @relation(fields: [majorId], references: [id])
}

model Permission {
  id                      Int                      @id @default(autoincrement())
  userEmail               String                   @unique
  majorEditingPermissions MajorEditingPermission[]
}

model MajorEditingPermission {
  id             Int        @id @default(autoincrement())
  majorId        Int        @unique
  permissionId   Int
  expirationDate DateTime
  major          Major      @relation(fields: [majorId], references: [id])
  permission     Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
}

model Label {
  id        String     @id @default(uuid())
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  color     LabelColor
  plannerId String
  planner   Planner    @relation(fields: [plannerId], references: [id], onDelete: Cascade)
}

model Permissions {
  id        Int    @id @default(autoincrement())
  userEmail String @unique
}

enum LabelColor {
  RED
  ORANGE
  YELLOW
  GREEN
  BLUE
  PURPLE
  PINK
  TEAL
  GREY
}

enum Role {
  USER
  ADMIN
}

enum Term {
  Fall
  Winter
  Spring
  Summer
}

enum ProgramType {
  Major
  Minor
}
